Definition: A structure containing set of vertices and a set of edges that connect pair of vertices.
It can be directed or undirected. It can be weighted or unweighted.
It shows networks like social media, road network like google map.

degree means no of neighbours.

Operations:
1. Add vertex: adding a nw node.
2. Add edges: adding a new edge between two nodes.
3. Remove vertex: removing a vertex and all edges associated with it.
4. Remove Edge: removing an edge from the graph.
5. Traverse: systematically visiting all vertices of graph via DFS or BFS.
6. Shortest Path: Find the shortest path between two vertices using Dijkstra's algo and Bellman ford algo.
7. Minimum Spanning Tree:  find the minimum spanning tree of the graph, which is a subgraph or a tree contains all the vertices of the graph with minimum total weights.

Representation of graph:

    0 -- 1
   / \   |
  2 - 3--4

1. Adjacency matrix - this is a 2D Matrix VxV and also called dense graph. 

For this example, the adjacency matrix would look like this:
    0  1  2  3  4
  0 0  1  1  0  0
  1 1  0  0  1  1
  2 1  0  0  1  0
  3 0  1  1  0  1
  4 0  1  0  1  0

2. Adjacency list - this is lists of an array where the index of the Array act as vertex or node and the corresponding list contains other nodes of the graph which connected or adjacent with that vertex. also called sparse graph.

The adjacency list representation would be:
  0: [1, 2]
  1: [0, 3, 4]
  2: [0, 3]
  3: [1, 2, 4]
  4: [1, 3]

3. Edge list: this is a list of edges (u, v) where u and v are vertices.

The edge list representation would be:
  (0, 1), (0, 2), (1, 3), (1, 4), (2, 3), (3, 4)


Some Algorithm: 

1. DFS (Depth First Search)
    it is a traversing algorithm which starts from root node and explores all the possible branch or nodes in one path before backtracking.
    used stack or recursion.

    DFS(graph, start):
        stack = [start]
        visited = set()
        while stack is not empty:
            current = stack.pop()
            if current is not in visited:
                visited.add(current)
                for neighbor in graph[current]:
                    stack.push(neighbor)
        return visited
TC: O(V + E), since it visited each vertex and edges once.
SC: O(V)  

2. BFS (Breadth First Search)

it is a traversing algorithm which start from root node and then explore all the nodes which is at one level or its neighbours then go to the next level (exploring neighbours) in this way it traverse all the nodes.

    BFS(graph, start):
        queue = [start]
        visited = set()
        while queue is not empty:
            current = queue.dequeue()
            if current is not in visited:
                visited.add(current)
                for neighbor in graph[current]:
                    queue.enqueue(neighbor)
        return visited

SAME COMPLEXITY.

3. Dijkstra's Algorithm:

find the shortest path from one vertex to all other vertex in a weighted graph. it is implemented using Priority Queue. PQ is used to select the next vertex with minimum distance.

    Dijkstra(graph, start):
        distances = {vertex: infinity for vertex in graph}
        distances[start] = 0
        pq = Priority_Queue()
        pq.push(start, 0)
        while pq is not empty:
            current, current_distance = pq.pop()
            for neighbor, weight in graph[current]:
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    pq.push(neighbor, distance)
        return distances

TC: O((V + E)log V  using a binary heap, or O(V^2) with a simple array implementation
SC: O(V)


4. Bellman-Ford Algorithm:

finds the shortest path from a single source vertex to all other vertices in a weighted graph, even if the graph contains negative-weight edges.

    Bellman_Ford(graph, start):
        distances = {vertex: infinity for vertex in graph}
        distances[start] = 0
        for _ in range(len(graph) - 1):
            for u, v, weight in edges:
                if distances[u] + weight < distances[v]:
                    distances[v] = distances[u] + weight
        for u, v, weight in edges:
            if distances[u] + weight < distances[v]:
                return "Graph contains negative weight cycle"
        return distances

TC: O(VE)
SC: O(V)

Traversal: DFS and BFS are fundamental for exploring and understanding the structure of a graph, such as finding connected components or detecting cycles.
Shortest Path: Dijkstra's and Bellman-Ford algorithms are crucial for finding the shortest path between two vertices in a graph, which has applications in network routing, transportation planning, and many other areas.




