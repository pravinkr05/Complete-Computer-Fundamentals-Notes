Definition:
A non linear data structure consist nodes and edges.
It contains root node, branch and leaves. each node has o or more child nodes.

Types:
Binary tree: Each node having at most two children.
Binary Search Tree: Left child node contains less than the node's value and the right child node contains greater than the node value.
Binary Heap: A specialized binary tree used in heap-based data structures, such as priority queues. 
Trie (Prefix Tree): Tree  data 

Opertion:
Insertion: Adding a new node to the tree.
Deletion: Removing a node from the tree.
Traversal: Visiting all nodes of the tree in a specific order (e.g., in-order, pre-order, post-order).
Search: Finding a specific node or value within the tree.

Advantage:
Efficient operation : complexity O(logn).
used in file system.
Database Indexing: Storing and searching data efficiently in databases using B-trees and other tree-based indexing structures.


BST:
#include <iostream>

class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : data(value), left(nullptr), right(nullptr) {}
};

class BST {
private:
    TreeNode* root;

public:
    BST() : root(nullptr) {}

    TreeNode* insert(TreeNode* node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }
        if (value < node->data) {
            node->left = insert(node->left, value);
        } else if (value > node->data) {
            node->right = insert(node->right, value);
        }
        return node;
    }

    void insert(int value) {
        root = insert(root, value);
    }

    void inorderTraversal(TreeNode* node) {
        if (node == nullptr) {
            return;
        }
        inorderTraversal(node->left);
        std::cout << node->data << " ";
        inorderTraversal(node->right);
    }

    void inorderTraversal() {
        inorderTraversal(root);
    }
};

int main() {
    BST bst;
    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    std::cout << "Inorder Traversal: ";
    bst.inorderTraversal();
    std::cout << std::endl;

    return 0;
}

