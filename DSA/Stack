Definition: A linear data structure that follows the Last-In First-Out (LIFO) principle, where elements are inserted and removed from one end, called the top of the stack.
Operation:
1.  Push: Adding an element to the top of the stack.
2.  Pop: Removing and returning the top element.
3.  Peek(or Top): Returning the top element.
4.  isEmpty: Checking if the stack is empty.
5.  Size: Returning the no of elements in the stack.

Implementation:
1. Using array but having fixed size.
2. Using linkedlist but having dynamic size.
3. In c++, Java built-in function is available.

Advantage:
Simple and efficient.
Constant time insertion and removal of top element.
Useful for function calls, expression evaluation and backtracking.

Real life application:
Function call stack - it executes function call in stack approch.
Undo Mechanism - user can revert its own actions.
Expression evaluation - Compiler used to evaluate the arithmatic expression and check for balanced paranthesis.


Real-Life Application: Function Call Stack
def func1():
    print("Inside func1")
    func2()
    print("Returning from func1")

def func2():
    print("Inside func2")

# Calling func1
func1()


Expression evaluation:

Function isBalanced(expression):
    stack = empty stack
    For each character ch in expression:
        If ch is an opening bracket:
            Push ch onto stack
        Else if ch is a closing bracket:
            If stack is empty:
                Return false // Unbalanced expression
            top = stack.pop()
            If top does not match the corresponding opening bracket for ch:
                Return false // Unbalanced expression
    If stack is not empty:
        Return false // Unbalanced expression
    Else:
        Return true // Balanced expression

Main:
    expression = input expression
    If isBalanced(expression):
        Output "The expression is balanced."
    Else:
        Output "The expression is not balanced."


Code:
#include <iostream>
#include <stack>
#include <string>

bool isBalanced(const std::string& expr) {
    std::stack<char> stk;
    for (char ch : expr) {
        if (ch == '(' || ch == '[' || ch == '{') {
            stk.push(ch);
        } else if (ch == ')' || ch == ']' || ch == '}') {
            if (stk.empty()) return false;
            char top = stk.top();
            stk.pop();
            if ((ch == ')' && top != '(') ||
                (ch == ']' && top != '[') ||
                (ch == '}' && top != '{')) {
                return false;
            }
        }
    }
    return stk.empty();
}

int main() {
    std::string expr;
    std::cout << "Enter an expression: ";
    std::getline(std::cin, expr);
    if (isBalanced(expr)) {
        std::cout << "The expression is balanced.\n";
    } else {
        std::cout << "The expression is not balanced.\n";
    }
    return 0;
}





